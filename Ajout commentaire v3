// Importation des bibliothèques nécessaires au code.
// Celles-ci incluent des utilitaires d'authentification, des services backend,
// des animations, des thèmes, des widgets, et d'autres packages.
import '/auth/firebase_auth/auth_util.dart';
import '/backend/backend.dart';
import '/flutter_flow/flutter_flow_animations.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/flutter_flow/flutter_flow_widgets.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';

// Importation d'un fichier de modèle nommé 'my_profile_model.dart'
// et le rend disponible pour l'exportation à partir de ce fichier.
import 'my_profile_model.dart';
export 'my_profile_model.dart';


// Widget qui affiche le profil de l'utilisateur.
class MyProfileWidget extends StatefulWidget {
  // Constructeur du widget, il ne fait que créer une instance de la classe.
  const MyProfileWidget({Key? key}) : super(key: key);

  // Méthode requise qui crée l'état pour le widget.
  @override
  _MyProfileWidgetState createState() => _MyProfileWidgetState();
}

// La classe `_MyProfileWidgetState` représente l'état interne du widget MyProfileWidget.
// Elle utilise le mixin TickerProviderStateMixin pour fournir des objets Ticker nécessaires à l'animation.

class _MyProfileWidgetState extends State<MyProfileWidget> with TickerProviderStateMixin {
  // Instance du modèle MyProfileModel utilisé par cet état.
  late MyProfileModel _model;

  // Clé globale pour accéder à l'état du Scaffold (structure de l'interface) associé à ce widget.
  final scaffoldKey = GlobalKey<ScaffoldState>();

  // Variables de déclenchement pour contrôler l'exécution d'animations spécifiques.
  var hasContainerTriggered1 = false;
  var hasContainerTriggered2 = false;

  // Map contenant les informations sur les animations liées à des conteneurs.
  final animationsMap = {
    // Animation associée à l'action de déclenchement 1.
    'containerOnActionTriggerAnimation1': AnimationInfo(
      trigger: AnimationTrigger.onActionTrigger,
      applyInitialState: false,
      effects: [
        // Effet de déplacement du conteneur avec une courbe de lissage et une durée spécifiées.
        MoveEffect(
          curve: Curves.easeInOut,
          delay: 0.ms,
          duration: 350.ms,
          begin: Offset(40, 0),
          end: Offset(0, 0),
        ),
      ],
    ),
    
    // Animation associée à l'action de déclenchement 2.
    'containerOnActionTriggerAnimation2': AnimationInfo(
      trigger: AnimationTrigger.onActionTrigger,
      applyInitialState: false,
      effects: [
        // Effet de déplacement du conteneur avec une courbe de lissage et une durée spécifiées.
        MoveEffect(
          curve: Curves.easeInOut,
          delay: 0.ms,
          duration: 350.ms,
          begin: Offset(-40, 0),
          end: Offset(0, 0),
        ),
      ],
    ),
  };
}


  // Méthode appelée lors de la création de l'état du widget.
@override
void initState() {
  super.initState();

  // Initialisation du modèle associé à cet état en utilisant la fonction de création spécifiée.
  _model = createModel(context, () => MyProfileModel());

  // Configuration des animations en utilisant la fonction setupAnimations
  // pour les animations déclenchées par une action ou celles qui ne nécessitent pas un état initial particulier.
  setupAnimations(
    animationsMap.values.where((anim) =>
        anim.trigger == AnimationTrigger.onActionTrigger ||
        !anim.applyInitialState),
    this,
  );
}

// Méthode appelée lors de la suppression de l'état du widget.
@override
void dispose() {
  // Libération des ressources associées au modèle.
  _model.dispose();

  super.dispose();
}

// Méthode de construction du widget.
@override
Widget build(BuildContext context) {
  // Mise en place du style de l'interface système pour la barre d'état si l'application est sur iOS.
  if (isiOS) {
    SystemChrome.setSystemUIOverlayStyle(
      SystemUiOverlayStyle(
        statusBarBrightness: Theme.of(context).brightness,
        systemStatusBarContrastEnforced: true,
      ),
    );
  }

  // Utilisation d'un StreamBuilder pour reconstruire le widget en fonction des données en continu (stream).
  return StreamBuilder<UsersRecord>(
    stream: UsersRecord.getDocument(currentUserReference!),
    builder: (context, snapshot) {
      // Personnalisation de l'apparence du widget en cours de chargement.
      if (!snapshot.hasData) {
        return Scaffold(
          backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
          body: Center(
            child: SizedBox(
              width: 50,
              height: 50,
              child: CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(
                  FlutterFlowTheme.of(context).primary,
                ),
              ),
            ),
          ),
        );
      }
    },
  );
}

        // Obtention de l'enregistrement de l'utilisateur à partir des données du snapshot.
final myProfileUsersRecord = snapshot.data!;

// Construction de l'interface utilisateur avec un Scaffold, AppBar et un corps sécurisé (SafeArea).
return Scaffold(
  key: scaffoldKey,
  backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
  appBar: AppBar(
    backgroundColor: FlutterFlowTheme.of(context).primary,
    automaticallyImplyLeading: false,
    title: Text(
      'Bienvenue',
      style: FlutterFlowTheme.of(context).displaySmall.override(
        fontFamily: 'Outfit',
        color: FlutterFlowTheme.of(context).white,
      ),
    ),
    actions: [],
    centerTitle: false,
    elevation: 0,
  ),
  body: SafeArea(
    top: true,
    child: Column(
      mainAxisSize: MainAxisSize.max,
      children: [
        // Zone d'affichage principale, utilisant un Expanded pour prendre tout l'espace disponible.
        Expanded(
          child: Padding(
            padding: EdgeInsetsDirectional.fromSTEB(0, 0, 0, 100),
            child: Column(
              mainAxisSize: MainAxisSize.max,
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                // Affichage du nom de l'utilisateur dans une barre stylisée.
                Row(
                  mainAxisSize: MainAxisSize.max,
                  children: [
                    Container(
                      width: MediaQuery.sizeOf(context).width,
                      height: 40,
                      decoration: BoxDecoration(
                        color: FlutterFlowTheme.of(context).primary,
                        border: Border.all(
                          color: FlutterFlowTheme.of(context).primary,
                          width: 1,
                        ),
                      ),
                      child: Padding(
                        padding: EdgeInsetsDirectional.fromSTEB(16, 0, 0, 0),
                        child: Text(
                          myProfileUsersRecord.displayName,
                          style: FlutterFlowTheme.of(context)
                              .titleMedium
                              .override(
                                fontFamily: 'Manrope',
                                color: FlutterFlowTheme.of(context).white,
                              ),
                        ),
                      ),
                    ),
                  ],
                ),
                
                // Section d'informations sur le compte avec une stylisation spécifique.
                Container(
                  width: MediaQuery.sizeOf(context).width,
                  decoration: BoxDecoration(
                    color:
                        FlutterFlowTheme.of(context).secondaryBackground,
                    boxShadow: [
                      BoxShadow(
                        blurRadius: 5,
                        color: Color(0x230E151B),
                        offset: Offset(0, 2),
                      )
                    ],
                  ),
                  child: Column(
                    mainAxisSize: MainAxisSize.max,
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Titre de la section d'informations.
                      Padding(
                        padding: EdgeInsetsDirectional.fromSTEB(16, 12, 0, 0),
                        child: Text(
                          'Infos sur le compte',
                          style: FlutterFlowTheme.of(context).bodySmall,
                        ),
                      ),
                      
                      // Zone cliquable permettant de modifier le profil de l'utilisateur.
                      Padding(
                        padding: EdgeInsetsDirectional.fromSTEB(0, 16, 0, 0),
                        child: InkWell(
                          // Navigation vers l'écran de modification de profil lors du clic.
                          onTap: () async {
                            context.pushNamed(
                              'EditProfile',
                              queryParameters: {
                                'displayName': serializeParam(
                                  myProfileUsersRecord,
                                  ParamType.Document,
                                ),
                                'email': serializeParam(
                                  myProfileUsersRecord,
                                  ParamType.Document,
                                ),
                              }.withoutNulls,
                              extra: <String, dynamic>{
                                'displayName': myProfileUsersRecord,
                                'email': myProfileUsersRecord,
                              },
                            );
                          },
                                  child: Row(
                                    mainAxisSize: MainAxisSize.max,
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Expanded(
                                        child: Padding(
                                          padding:
                                              EdgeInsetsDirectional.fromSTEB(
                                                  16, 20, 0, 20),
                                          child: Text(
                                            'Editer le profil ',
                                            style: FlutterFlowTheme.of(context)
                                                .bodyMedium,
                                          ),
                                        ),
                                      ),
                                      Padding(
                                        padding: EdgeInsetsDirectional.fromSTEB(
                                            0, 0, 12, 0),
                                        child: Icon(
                                          Icons.arrow_forward_ios,
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryText,
                                          size: 24,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                              Divider(
                                height: 2,
                                thickness: 1,
                                indent: 0,
                                endIndent: 0,
                                color: FlutterFlowTheme.of(context).lineColor,
                              ),
                              InkWell(
                                splashColor: Colors.transparent,
                                focusColor: Colors.transparent,
                                hoverColor: Colors.transparent,
                                highlightColor: Colors.transparent,
                                onTap: () async {
                                  context.pushNamed('ChangePassword');
                                },
  ///Contenu de la ligne, comprenant le texte "Editer le profil" et une icône de flèche vers la droite.
  child: Row(
    mainAxisSize: MainAxisSize.max,
    mainAxisAlignment: MainAxisAlignment.center,
    children: [
      Expanded(
        child: Padding(
          padding: EdgeInsetsDirectional.fromSTEB(16, 20, 0, 20),
          child: Text(
            'Editer le profil ',
            style: FlutterFlowTheme.of(context).bodyMedium,
          ),
        ),
      ),
      Padding(
        padding: EdgeInsetsDirectional.fromSTEB(0, 0, 12, 0),
        child: Icon(
          Icons.arrow_forward_ios,
          color: FlutterFlowTheme.of(context).secondaryText,
          size: 24,
        ),
      ),
    ],
  ),
),

// Ligne de séparation visuelle (divider) entre les options.
Divider(
  height: 2,
  thickness: 1,
  indent: 0,
  endIndent: 0,
  color: FlutterFlowTheme.of(context).lineColor,
),

// Zone cliquable pour naviguer vers l'écran de changement de mot de passe.
InkWell(
  splashColor: Colors.transparent,
  focusColor: Colors.transparent,
  hoverColor: Colors.transparent,
  highlightColor: Colors.transparent,
  onTap: () async {
    // Navigation vers l'écran de changement de mot de passe.
    context.pushNamed('ChangePassword');
  },
  // Contenu de la ligne, comprenant le texte "Changer mot de passe" et une icône de flèche vers la droite.
  child: Row(
    mainAxisSize: MainAxisSize.max,
    mainAxisAlignment: MainAxisAlignment.center,
    children: [
      Expanded(
        child: Padding(
          padding: EdgeInsetsDirectional.fromSTEB(16, 20, 0, 20),
          child: Text(
            'Changer mot de passe',
            style: FlutterFlowTheme.of(context).bodyMedium,
          ),
        ),
      ),
      Padding(
        padding: EdgeInsetsDirectional.fromSTEB(0, 0, 12, 0),
        child: Icon(
          Icons.arrow_forward_ios,
          color: FlutterFlowTheme.of(context).secondaryText,
          size: 24,
        ),
      ),
    ],
  ),
),

// Ligne de séparation visuelle (divider) entre les options.
Divider(
  height: 2,
  thickness: 1,
  indent: 0,
  endIndent: 0,
  color: FlutterFlowTheme.of(context).lineColor,
),

// Section pour activer le mode sombre avec animation associée.
Padding(
  padding: EdgeInsetsDirectional.fromSTEB(0, 1, 0, 0),
  child: Column(
    mainAxisSize: MainAxisSize.max,
    children: [
      // Zone cliquable pour activer le mode sombre.
      InkWell(
        splashColor: Colors.transparent,
        focusColor: Colors.transparent,
        hoverColor: Colors.transparent,
        highlightColor: Colors.transparent,
        onTap: () async {
          // Activation du mode sombre et déclenchement de l'animation associée.
          setDarkModeSetting(context, ThemeMode.dark);
          if (animationsMap['containerOnActionTriggerAnimation2'] != null) {
            setState(() => hasContainerTriggered2 = true);
            SchedulerBinding.instance.addPostFrameCallback((_) async =>
                await animationsMap['containerOnActionTriggerAnimation2']!
                    .controller
                    .forward(from: 0.0));
          }
        },
// Conteneur pour afficher et permettre la modification du mode sombre.
child: Container(
  width: MediaQuery.sizeOf(context).width,
  decoration: BoxDecoration(
    color: FlutterFlowTheme.of(context).secondaryBackground,
  ),
  // Zone de contenu avec une rangée contenant le texte "Mode sombre" et un bouton de bascule.
  child: Padding(
    padding: EdgeInsetsDirectional.fromSTEB(16, 12, 16, 12),
    child: Row(
      mainAxisSize: MainAxisSize.max,
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        // Texte indiquant l'option "Mode sombre".
        Text(
          'Mode sombre',
          style: FlutterFlowTheme.of(context).bodyMedium,
        ),
        // Bouton de bascule avec une icône de lune et un conteneur de fond.
        Container(
          width: 80,
          height: 40,
          decoration: BoxDecoration(
            color: FlutterFlowTheme.of(context).primaryBackground,
            borderRadius: BorderRadius.circular(20),
          ),
          // Stack pour superposer l'icône de lune et un conteneur de fond.
          child: Stack(
            alignment: AlignmentDirectional(0, 0),
            children: [
              // Icône de lune positionnée à droite.
              Align(
                alignment: AlignmentDirectional(0.95, 0.00),
                child: Padding(
                  padding: EdgeInsetsDirectional.fromSTEB(0, 0, 8, 0),
                  child: Icon(
                    Icons.nights_stay,
                    color: Color(0xFF95A1AC),
                    size: 20,
                  ),
                ),
              ),
              // Conteneur de fond animé en fonction du déclenchement de l'animation 1.
              Align(
                alignment: AlignmentDirectional(-0.85, 0.00),
                child: Container(
                  width: 36,
                  height: 36,
                  decoration: BoxDecoration(
                    color: FlutterFlowTheme.of(context).secondaryBackground,
                    boxShadow: [
                      BoxShadow(
                        blurRadius: 4,
                        color: Color(0x430B0D0F),
                        offset: Offset(0, 2),
                      )
                    ],
                    borderRadius: BorderRadius.circular(30),
                    shape: BoxShape.rectangle,
                  ),
                ).animateOnActionTrigger(
                  animationsMap['containerOnActionTriggerAnimation1']!,
                  // Indication que l'animation 1 a été déclenchée.
                  hasBeenTriggered: hasContainerTriggered1,
                ),
              ),
            ],
          ),
        ),
      ],
    ),
  ),
),

// Condition pour afficher une option supplémentaire si le mode sombre est déjà activé.
if (Theme.of(context).brightness == Brightness.dark)
  // Zone cliquable pour désactiver le mode sombre.
  InkWell(
    splashColor: Colors.transparent,
    focusColor: Colors.transparent,
    hoverColor: Colors.transparent,
    highlightColor: Colors.transparent,
    onTap: () async {
      // Désactivation du mode sombre et déclenchement de l'animation associée.
      setDarkModeSetting(context, ThemeMode.light);
      if (animationsMap['containerOnActionTriggerAnimation1'] != null) {
        setState(() => hasContainerTriggered1 = true);
        SchedulerBinding.instance.addPostFrameCallback((_) async =>
            await animationsMap['containerOnActionTriggerAnimation1']!
                .controller
                .forward(from: 0.0));
      }
    },
// Partie supérieure de l'écran comprenant des options pour changer le thème (sombre ou clair).
child: Container(
  height: MediaQuery.sizeOf(context).height,
  child: Column(
    children: [
      // Option pour basculer vers le mode clair.
      Container(
        width: MediaQuery.sizeOf(context).width,
        decoration: BoxDecoration(
          color: FlutterFlowTheme.of(context).secondaryBackground,
        ),
        child: Padding(
          padding: EdgeInsetsDirectional.fromSTEB(16, 12, 16, 12),
          child: Row(
            mainAxisSize: MainAxisSize.max,
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              // Texte indiquant l'option "Switch to Light Mode".
              Text(
                'Switch to Light Mode',
                style: FlutterFlowTheme.of(context).bodyMedium.override(
                  fontFamily: 'Outfit',
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
              // Bouton de bascule avec une icône de soleil et un conteneur de fond.
              Container(
                width: 80,
                height: 40,
                decoration: BoxDecoration(
                  color: FlutterFlowTheme.of(context).primaryBackground,
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Stack(
                  alignment: AlignmentDirectional(0, 0),
                  children: [
                    // Icône de soleil positionnée à gauche.
                    Align(
                      alignment: AlignmentDirectional(-0.90, 0.00),
                      child: Padding(
                        padding: EdgeInsetsDirectional.fromSTEB(8, 2, 0, 0),
                        child: Icon(
                          Icons.wb_sunny_rounded,
                          color: Color(0xFF95A1AC),
                          size: 24,
                        ),
                      ),
                    ),
                    // Conteneur de fond animé en fonction du déclenchement de l'animation 2.
                    Align(
                      alignment: AlignmentDirectional(0.90, 0.00),
                      child: Container(
                        width: 36,
                        height: 36,
                        decoration: BoxDecoration(
                          color: FlutterFlowTheme.of(context).secondaryBackground,
                          boxShadow: [
                            BoxShadow(
                              blurRadius: 4,
                              color: Color(0x430B0D0F),
                              offset: Offset(0, 2),
                            )
                          ],
                          borderRadius: BorderRadius.circular(30),
                          shape: BoxShape.rectangle,
                        ),
                      ).animateOnActionTrigger(
                        animationsMap['containerOnActionTriggerAnimation2']!,
                        // Indication que l'animation 2 a été déclenchée.
                        hasBeenTriggered: hasContainerTriggered2,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
      // [Reste du code pour la construction de la partie supérieure de l'écran.]

// Partie inférieure de l'écran comprenant un bouton de déconnexion et l'affichage de la version de l'application.
Container(
  height: MediaQuery.sizeOf(context).height,
  child: Column(
    mainAxisSize: MainAxisSize.max,
    mainAxisAlignment: MainAxisAlignment.end,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      // Bouton de déconnexion avec l'utilisation de la bibliothèque GoRouter.
      Padding(
        padding: EdgeInsetsDirectional.fromSTEB(0, 0, 0, 16),
        child: FFButtonWidget(
          onPressed: () async {
            // Préparation d'un événement d'authentification avec GoRouter.
            GoRouter.of(context).prepareAuthEvent();
            // Déconnexion de l'utilisateur.
            await authManager.signOut();
            // Effacement de la localisation de redirection avec GoRouter.
            GoRouter.of(context).clearRedirectLocation();
            // Navigation vers l'écran de SplashScreen après la déconnexion.
            context.goNamedAuth('SplashScreen', context.mounted);
          },
          text: 'Déconnexion',
          // Options de style pour le bouton de déconnexion.
          options: FFButtonOptions(
            width: 130,
            height: 50,
            padding: EdgeInsetsDirectional.fromSTEB(0, 0, 0, 0),
            iconPadding: EdgeInsetsDirectional.fromSTEB(0, 0, 0, 0),
            color: FlutterFlowTheme.of(context).secondaryBackground,
            textStyle: FlutterFlowTheme.of(context).titleMedium.override(
              fontFamily: 'Manrope',
              color: FlutterFlowTheme.of(context).primaryText,
            ),
            elevation: 3,
            borderSide: BorderSide(
              color: Colors.transparent,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(8),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}
